function Get-FolderSize {
    param (
        [string]$folder
    )
    $size = 0
    # Recurso -Recurse não está garantido no PowerShell 2.0, então usamos um loop manual.
    Get-ChildItem -Path $folder -Force -ErrorAction SilentlyContinue | ForEach-Object {
        if ($_.PSIsContainer) {
            $size += Get-FolderSize -folder $_.FullName
        } else {
            $size += $_.Length
        }
    }
    return $size
}

function Get-TopFoldersBySize {
    param (
        [string]$drive,
        [int]$topN = 10
    )
    $folderSizes = @()
    Get-ChildItem -Path $drive -Directory -Force -ErrorAction SilentlyContinue | ForEach-Object {
        $folderPath = $_.FullName
        try {
            $folderSize = Get-FolderSize -folder $folderPath
            $folderSizes += New-Object PSObject -Property @{
                Folder = $folderPath
                Size   = $folderSize
            }
        } catch {
            Write-Output ("No access to folder: {0}" -f $folderPath)
        }
    }
    $folderSizes = $folderSizes | Sort-Object -Property Size -Descending
    return $folderSizes[0..([Math]::Min($topN, $folderSizes.Count - 1))]
}

function Get-TopSubfoldersBySize {
    param (
        [string]$folder,
        [int]$topN = 10
    )
    $subfolderSizes = @()
    Get-ChildItem -Path $folder -Directory -Force -ErrorAction SilentlyContinue | ForEach-Object {
        $subfolderPath = $_.FullName
        try {
            $subfolderSize = Get-FolderSize -folder $subfolderPath
            $subfolderSizes += New-Object PSObject -Property @{
                Folder = $subfolderPath
                Size   = $subfolderSize
            }
        } catch {
            Write-Output ("No access to subfolder: {0}" -f $subfolderPath)
        }
    }
    $subfolderSizes = $subfolderSizes | Sort-Object -Property Size -Descending
    return $subfolderSizes[0..([Math]::Min($topN, $subfolderSizes.Count - 1))]
}

# Defina o drive a ser verificado
$drive = 'C:\'

# Top 10 pastas no drive
$topFolders = Get-TopFoldersBySize -drive $drive

# Selecionar as 5 maiores pastas
$top5Folders = $topFolders[0..([Math]::Min(4, $topFolders.Count - 1))]

# Caminho do desktop
$desktopPath = [System.Environment]::GetFolderPath('Desktop')

# Caminho do arquivo de saída
$outputFilePath = Join-Path -Path $desktopPath -ChildPath 'C_drive_scan_results.txt'

# Gravar resultados no arquivo
$outputFile = New-Object System.IO.StreamWriter($outputFilePath)

$outputFile.WriteLine("Top 10 folders by size:")
$topFolders | ForEach-Object {
    $outputFile.WriteLine(("Folder: {0}, Size: {1:N2} GB" -f $_.Folder, ($_.Size / 1GB)))
}

$top5Folders | ForEach-Object {
    $folderPath = $_.Folder
    $outputFile.WriteLine(("`nTop 10 subfolders by size in {0}:" -f $folderPath))
    $topSubfolders = Get-TopSubfoldersBySize -folder $folderPath
    $topSubfolders | ForEach-Object {
        $outputFile.WriteLine(("Subfolder: {0}, Size: {1:N2} GB" -f $_.Folder, ($_.Size / 1GB)))
    }
}

$outputFile.Close()

Write-Output ("Results have been saved to {0}" -f $outputFilePath)
